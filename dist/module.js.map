{"version":3,"sources":["../src/module.js"],"names":["MetricsPanelCtrl","_","$","angular","kbn","config","TimeSeries","MultistatPanelCtrl","$scope","$injector","alertSrv","panelDefaults","panel","elem","ctrl","defaults","events","on","onRender","bind","onDataReceived","onDataError","onInitEditMode","err","set","seriesList","render","metricNames","fontSizes","fontSizes0","concat","displayStates","unitFormats","getUnitFormats","addEditorTab","subItem","Metric","Format","value","html","height","data","isNumeric","buildValueHtml","buildHtml","renderingCompleted","dataList","length","dataPoints","datapoints","series","map","seriesHandler","setValues","seriesData","alias","target","flotpairs","getFlotPairs","nullPointMode","decimals","isNumber","scaledDecimals","delta","dec","Math","floor","log","LN10","magn","pow","norm","size","result","max","decimalInfo","getDecimalsForValue","formatFunc","valueFormats","lastPoint","last","lastValue","isArray","Name","valueRounded","valueFormatted","isString","escape","stats","Decimals","roundValue","scopedVars","extend","label","refresh","scope","attrs","find","templateUrl"],"mappings":"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","file":"module.js","sourcesContent":["import {\n    MetricsPanelCtrl\n} from 'app/plugins/sdk';\n\nimport \"./css/multistat-panel.css!\";\n\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport 'jquery.flot';\nimport angular from 'angular';\nimport kbn from 'app/core/utils/kbn';\nimport config from 'app/core/config';\nimport TimeSeries from 'app/core/time_series2';\n\nclass MultistatPanelCtrl extends MetricsPanelCtrl {\n\n    /** @ngInject */\n    constructor($scope, $injector, alertSrv) {\n        super($scope, $injector);\n\n        this.alertSrv = alertSrv;\n\n        var panelDefaults = {\n\n            \"Metric\": {\n                \"Name\": \"current\",\n                \"Format\": \"percent\",\n                \"Color\": \"rgb(2, 247, 2)\",\n                \"Decimals\": \"4\",\n                \"FontSize\": \"100%\"\n            },\n            \"Prefix\": {\n                \"Text\": \"\",\n                \"FontSize\": \"hide\",\n            },\n            \"Postfix\": {\n                \"Text\": \"\",\n                \"FontSize\": \"hide\",\n            }\n        };\n\n        var panel = {};\n        var elem = {};\n        var ctrl = {};\n\n        _.defaults(this.panel, panelDefaults);\n\n        this.events.on('render', this.onRender.bind(this));\n        this.events.on('data-received', this.onDataReceived.bind(this));\n        this.events.on('data-error', this.onDataError.bind(this));\n        this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    }\n\n    onDataError(err) {\n        this.alertSrv.set('Multistat Data Error', err, 'error', 5000);\n        this.seriesList = [];\n        this.render([]);\n    }\n\n    onInitEditMode() {\n        this.metricNames = ['min', 'max', 'avg', 'current', 'total', 'name', 'first', 'delta', 'diff', 'range'];\n        this.fontSizes = ['20%', '30%', '50%', '70%', '80%', '100%', '110%', '120%', '150%', '170%', '200%'];\n        this.fontSizes0 = ['hide'].concat(this.fontSizes);\n        this.displayStates = ['disabled', 'static', 'flash'];\n        this.unitFormats = kbn.getUnitFormats();\n        this.addEditorTab('Options', 'public/plugins/michaeldmoore-multistat-panel/options.html', 2);\n    }\n\n    setUnitFormat(subItem) {\n        this.panel.Metric.Format = subItem.value;\n        this.render();\n    }\n\n    buildValueHtml() {\n        var html = '';\n\n        html += \"<div class='michaeldmoore-multistat-panel-value-container'>\";\n//        if (this.panel.Prefix.Text != '' && this.panel.Prefix.FontSize != 'hide')\n//            html += this.getTextSpan('michaeldmoore-multistat-panel-prefix', this.panel.Prefix.FontSize, '', this.panel.Prefix.Text, false);\n//\n//        html += this.getValueSpan('michaeldmoore-multistat-panel-value', this.panel.Metric.FontSize, this.panel.Metric.Decimals, this.data.value, \"Value\");\n//\n//        if (this.panel.Postfix.Text != '' && this.panel.Postfix.FontSize != 'hide')\n//            html += this.getTextSpan('michaeldmoore-multistat-panel-postfix', this.panel.Postfix.FontSize, '', this.panel.Postfix.Text, false);\n//\n        html += \"</div>\";\n\n        return html;\n    }\n\n    buildHtml() {\n        var html = \"<div class='michaeldmoore-multistat-panel-container' style='height:\" + this.ctrl.height + \"px;'>\";\n\n        if (this.data != null && this.data.value != null) {\n            if ($.isNumeric(this.data.value)) {\n                html += this.buildValueHtml();\n            } else\n                this.alertSrv.set('Multistat Data Warning', 'Last data point is non-numeric', 'warning', 5000);\n        } else\n            this.alertSrv.set('Multistat Data Warning', 'Last data point is null', 'info', 1000);\n\n        html += \"</div>\";\n\n        this.elem.html(html);\n    }\n\n    onRender() {\n        this.buildHtml();\n        this.ctrl.renderingCompleted();\n    }\n\n\n    onDataReceived(dataList) {\n        var data = {};\n        if (dataList.length > 0) {\n            var dataPoints = dataList[0].datapoints;\n            if (dataPoints.length < 2) {\n                this.alertSrv.set('Multistat Data Error', 'No data', 'error', 5000);\n            } else {\n                this.series = dataList.map(this.seriesHandler.bind(this));\n                this.setValues(data);\n            }\n        }\n        this.data = data;\n        this.render();\n    }\n\n    seriesHandler(seriesData) {\n        var series = new TimeSeries({\n            datapoints: seriesData.datapoints,\n            alias: seriesData.target,\n        });\n\n        series.flotpairs = series.getFlotPairs(this.panel.nullPointMode);\n        return series;\n    }\n\n    getDecimalsForValue(value, decimals) {\n        if (_.isNumber(decimals)) {\n            return {\n                decimals: decimals,\n                scaledDecimals: null\n            };\n        }\n\n        var delta = value / 2;\n        var dec = -Math.floor(Math.log(delta) / Math.LN10);\n\n        var magn = Math.pow(10, -dec),\n            norm = delta / magn, // norm is between 1.0 and 10.0\n            size;\n\n        if (norm < 1.5) {\n            size = 1;\n        } else if (norm < 3) {\n            size = 2;\n            // special case for 2.5, requires an extra decimal\n            if (norm > 2.25) {\n                size = 2.5;\n                ++dec;\n            }\n        } else if (norm < 7.5) {\n            size = 5;\n        } else {\n            size = 10;\n        }\n\n        size *= magn;\n\n        // reduce starting decimals if not needed\n        if (Math.floor(value) === value) {\n            dec = 0;\n        }\n\n        var result = {};\n        result.decimals = Math.max(0, dec);\n        result.scaledDecimals = result.decimals - Math.floor(Math.log(size) / Math.LN10) + 2;\n\n        return result;\n    }\n\n    formatValue(value, decimals) {\n        // crude work-around for kbn formatting function error - preserve decimal places even for whole numbers\n        if (value == 0 && decimals > 0)\n            value += 0.000000000000001;\n        var decimalInfo = this.getDecimalsForValue(value, decimals);\n        var formatFunc = kbn.valueFormats[this.panel.Metric.Format];\n        return formatFunc(value, decimalInfo.decimals, decimalInfo.scaledDecimals);\n    }\n\n    setValues(data) {\n        data.flotpairs = [];\n\n        if (this.series.length > 1) {\n//            this.alertSrv.set('Multistat Multiple Series Error',\n//                'Metric query returns ' + this.series.length + ' series. Multistat Panel expects a single series.\\n\\nResponse:\\n' + JSON.stringify(this.series), 'error', 10000);\n        }\n\n        if (this.series && this.series.length > 0) {\n            var lastPoint = _.last(this.series[0].datapoints);\n            var lastValue = _.isArray(lastPoint) ? lastPoint[0] : null;\n\n            if (this.panel.Metric.Name === 'name') {\n                data.value = 0;\n                data.valueRounded = 0;\n                data.valueFormatted = this.series[0].alias;\n            } else if (_.isString(lastValue)) {\n                data.value = 0;\n                data.valueFormatted = _.escape(lastValue);\n                data.valueRounded = 0;\n            } else {\n                data.value = this.series[0].stats[this.panel.Metric.Name];\n                data.flotpairs = this.series[0].flotpairs;\n\n                if (data == null || data.value == null) {\n                    data.value = 0.0;\n                }\n\n                var decimalInfo = this.getDecimalsForValue(data.value, this.panel.Metric.Decimals);\n                var formatFunc = kbn.valueFormats[this.panel.Metric.Format];\n                data.valueFormatted = formatFunc(data.value, decimalInfo.decimals, decimalInfo.scaledDecimals);\n                data.valueRounded = kbn.roundValue(data.value, decimalInfo.decimals);\n            }\n\n            if (data == null || data.value == null) {\n                data.value = 0.0;\n            }\n\n            // Add $__name variable for using in prefix or postfix\n            data.scopedVars = _.extend({}, this.panel.scopedVars);\n            data.scopedVars[\"__name\"] = {\n                value: this.series[0].label\n            };\n        }\n    }\n\n    onConfigChanged() {\n        this.refresh();\n    }\n\n    link(scope, elem, attrs, ctrl) {\n        this.ctrl = ctrl;\n        this.elem = elem.find('.panel-content');\n    }\n}\n\nMultistatPanelCtrl.templateUrl = 'module.html';\n\nexport {\n    MultistatPanelCtrl as PanelCtrl\n};\n"]}