{"version":3,"sources":["../src/module.js"],"names":["MetricsPanelCtrl","_","$","angular","kbn","config","TimeSeries","MultistatPanelCtrl","$scope","$injector","alertSrv","panelDefaults","panel","elem","ctrl","defaults","events","on","onRender","bind","onDataReceived","onDataError","onInitEditMode","err","set","seriesList","render","metricNames","fontSizes","fontSizes0","concat","displayStates","unitFormats","getUnitFormats","addEditorTab","subItem","Metric","Format","value","html","height","buildDateHtml","buildFrameRowsHtml","$title","closest","find","$maxDate","length","append","children","last","ShowDate","maxDate","rows","time_col","i","text","show","hide","minValue","value_col","maxValue","isNumeric","MinValue","MaxValue","ShowTopScale","ShowBottomScale","$middleLeft","dy","metric_col","$middleRight","percent","barWidth","width","buildFrameHtml","buildRowsHtml","renderingCompleted","dataList","type","parseCols","columns","Type","cols","refresh","scope","attrs","templateUrl"],"mappings":"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","file":"module.js","sourcesContent":["import {\r\n    MetricsPanelCtrl\r\n} from 'app/plugins/sdk';\r\n\r\nimport \"./css/multistat-panel.css!\";\r\n\r\nimport _ from 'lodash';\r\nimport $ from 'jquery';\r\nimport 'jquery.flot';\r\nimport angular from 'angular';\r\nimport kbn from 'app/core/utils/kbn';\r\nimport config from 'app/core/config';\r\nimport TimeSeries from 'app/core/time_series2';\r\n\r\nclass MultistatPanelCtrl extends MetricsPanelCtrl {\r\n\r\n    /** @ngInject */\r\n    constructor($scope, $injector, alertSrv) {\r\n        super($scope, $injector);\r\n\r\n        this.alertSrv = alertSrv;\r\n\r\n        var panelDefaults = {\r\n\t\t\t\"ShowDate\": true,\r\n\t\t\t\"ShowTopScale\": false,\r\n\t\t\t\"ShowBottomScale\": true,\r\n\t\t\t\"MinValue\": \"\",\r\n\t\t\t\"MaxValue\": \"\",\r\n            \"Metric\": {\r\n                \"Name\": \"current\",\r\n                \"Format\": \"percent\",\r\n                \"Color\": \"rgb(2, 247, 2)\",\r\n                \"Decimals\": \"4\",\r\n                \"FontSize\": \"100%\"\r\n            },\r\n            \"Prefix\": {\r\n                \"Text\": \"\",\r\n                \"FontSize\": \"hide\",\r\n            },\r\n            \"Postfix\": {\r\n                \"Text\": \"\",\r\n                \"FontSize\": \"hide\",\r\n            }\r\n        };\r\n\r\n        var panel = {};\r\n        var elem = {};\r\n        var ctrl = {};\r\n\r\n        _.defaults(this.panel, panelDefaults);\r\n\r\n        this.events.on('render', this.onRender.bind(this));\r\n        this.events.on('data-received', this.onDataReceived.bind(this));\r\n        this.events.on('data-error', this.onDataError.bind(this));\r\n        this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\r\n    }\r\n\r\n    onDataError(err) {\r\n        this.alertSrv.set('Multistat Data Error', err, 'error', 5000);\r\n        this.seriesList = [];\r\n        this.render([]);\r\n    }\r\n\r\n    onInitEditMode() {\r\n        this.metricNames = ['min', 'max', 'avg', 'current', 'total', 'name', 'first', 'delta', 'diff', 'range'];\r\n        this.fontSizes = ['20%', '30%', '50%', '70%', '80%', '100%', '110%', '120%', '150%', '170%', '200%'];\r\n        this.fontSizes0 = ['hide'].concat(this.fontSizes);\r\n        this.displayStates = ['disabled', 'static', 'flash'];\r\n        this.unitFormats = kbn.getUnitFormats();\r\n        this.addEditorTab('Options', 'public/plugins/michaeldmoore-multistat-panel/options.html', 2);\r\n    }\r\n\r\n    setUnitFormat(subItem) {\r\n        this.panel.Metric.Format = subItem.value;\r\n        this.render();\r\n    }\r\n\r\n    buildFrameHtml() {\r\n        var html = \"<div class='michaeldmoore-multistat-panel-container' style='height:\" + this.ctrl.height + \"px;'>\";\r\n\t\tthis.buildDateHtml();\r\n//        if (this.data != null && this.data.value != null) {\r\n//            if ($.isNumeric(this.data.value)) {\r\n//                html += this.buildValueHtml();\r\n//            } else\r\n//                this.alertSrv.set('Multistat Data Warning', 'Last data point is non-numeric', 'warning', 5000);\r\n//        } else\r\n//            this.alertSrv.set('Multistat Data Warning', 'Last data point is null', 'info', 1000);\r\n//\r\n\r\n\t\thtml += this.buildFrameRowsHtml();\r\n\r\n        html += \"</div>\";\r\n\r\n        this.elem.html(html);\r\n    }\r\n\r\n\tbuildDateHtml(){\r\n\t\tvar $title = this.elem.closest('.panel-container').find('.panel-title.drag-handle.pointer');\r\n\t\tvar $maxDate = $title.find('span.michaeldmoore-multistat-maxDate');\r\n\r\n\t\tif($maxDate.length == 0)\r\n\t\t\t$maxDate = $title.append('<span class=\"michaeldmoore-multistat-maxDate\"/>').children().last();\r\n\r\n\t\tif (this.panel.ShowDate) {\r\n\t\t\tvar maxDate = this.rows[0][this.time_col];\r\n\r\n\t\t\tfor(var i = 1; i < this.rows.length; i++){\r\n\t\t\t\tif (maxDate < this.rows[0][this.time_col])\r\n\t\t\t\t\tmaxDate = this.rows[0][this.time_col];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t$maxDate.text(maxDate).show();\r\n\t\t}\r\n\t\telse\r\n\t\t\t$maxDate.hide();\t\t\t\r\n\t}\r\n\r\n\tbuildFrameRowsHtml(){\r\n\t\tvar minValue = this.rows[0][this.value_col];\r\n\t\tvar maxValue = minValue;\r\n\t\tfor(var i = 1; i < this.rows.length; i++){\r\n\t\t\tvar value = this.rows[i][this.value_col]; \r\n\t\t\tif (minValue > value)\r\n\t\t\t\tminValue = value;\r\n\t\t\tif (maxValue < value)\r\n\t\t\t\tmaxValue = value;\r\n\t\t}\r\n\t\t\r\n\t\tif ($.isNumeric(this.panel.MinValue))\r\n\t\t\tminValue = this.panel.MinValue;\r\n\t\t\r\n\t\tif ($.isNumeric(this.panel.MaxValue))\r\n\t\t\tmaxValue = this.panel.MaxValue;\r\n\t\t\r\n//\t\tvar range = maxValue - minValue;\r\n\t\t\r\n\t\tvar html = '<table width=\"100%\" height=\"100%\"><tbody>';\r\n\t\tif (this.panel.ShowTopScale) {\r\n\t\t\thtml += '<tr><td class=\"michaeldmoore-multistat-rows-topleft\"/>';\r\n\t\t\thtml += '<td class=\"michaeldmoore-multistat-rows-topright\">bbb</td></tr>';\r\n\t\t}\r\n\t\t\r\n\t\thtml += '<tr height=\"100%\"><td class=\"michaeldmoore-multistat-rows-middleleft\"/>';\r\n\t\thtml += '<td class=\"michaeldmoore-multistat-rows-middleright\"/></tr>';\r\n\t\t\r\n\t\tif (this.panel.ShowBottomScale) {\r\n\t\t\thtml += '<tr><td class=\"michaeldmoore-multistat-rows-bottomleft\"/>';\r\n\t\t\thtml += '<td class=\"michaeldmoore-multistat-rows-bottomright\">fff</td></tr>';\r\n\t\t}\r\n\r\n\t\thtml += '</tbody></table>';\r\n\t\treturn html;\r\n\t}\r\n\r\n\tbuildRowsHtml() {\r\n\t\tvar minValue = this.rows[0][this.value_col];\r\n\t\tvar maxValue = minValue;\r\n\t\tfor(var i = 1; i < this.rows.length; i++){\r\n\t\t\tvar value = this.rows[i][this.value_col]; \r\n\t\t\tif (minValue > value)\r\n\t\t\t\tminValue = value;\r\n\t\t\tif (maxValue < value)\r\n\t\t\t\tmaxValue = value;\r\n\t\t}\r\n\t\t\r\n\t\tif ($.isNumeric(this.panel.MinValue))\r\n\t\t\tminValue = this.panel.MinValue;\r\n\t\t\r\n\t\tif ($.isNumeric(this.panel.MaxValue))\r\n\t\t\tmaxValue = this.panel.MaxValue;\r\n\r\n\t\tvar $middleLeft = this.elem.find('.michaeldmoore-multistat-rows-middleleft');\r\n\t\tvar dy = $middleLeft.height() / this.rows.length;\r\n\t\tvar html = '';\r\n\t\tfor(var i = 0; i < this.rows.length; i++){\r\n\t\t\thtml += '<div style=\"line-height:' + dy + 'px;\">' + this.rows[i][this.metric_col] + '</div>';\r\n\t\t}\r\n        $middleLeft.html(html);\r\n\r\n\t\tvar $middleRight = this.elem.find('.michaeldmoore-multistat-rows-middleright');\r\n\t\thtml = '';\r\n\t\t//var gap = 0;\r\n\t\t//var barTop = gap;\r\n\t\t//var barHeight = dy - 2 * gap;\r\n\t\tfor(var i = 0; i < this.rows.length; i++){\r\n\t\t\tvar value = this.rows[i][this.value_col]; \r\n\t\t\tvar percent = (value - minValue) / (maxValue - minValue);\r\n\t\t\tvar barWidth = percent * $middleRight.width();\r\n\t\t\t//html += '<div style=\"position:relative;left:0px;top:0px;background-color:black;height:' + dy + 'px;width:' + barWidth + 'px;\"/>';\r\n\t\t\t//html += '<div style=\"position:relative;left:10px;top:0px;\">' + value + '</div>';\r\n\t\t\thtml += '<div style=\"line-height:' + dy + 'px;\">' + value + '</div>';\r\n\t\t\t//barTop += gap * 2;\r\n\t\t}\r\n        $middleRight.html(html);\r\n\t}\r\n\t\r\n    onRender() {\r\n        this.buildFrameHtml();\r\n        this.buildRowsHtml();\r\n        this.ctrl.renderingCompleted();\r\n    }\r\n\r\n\r\n    onDataReceived(dataList) {\r\n\t\tif (dataList.length == 0){\r\n\t\t\tthis.elem.html(\"<div style='position:absolute;top:50%;text-align:center;font-size:0.875rem;'>No data to show</div>\");\r\n\t\t}\r\n\t\telse if (dataList[0].type == \"table\"){\r\n\t\t\tthis.rows = dataList[0].rows;\r\n\t\t\tthis.parseCols(dataList[0].columns);\r\n\t\t\tthis.render();\r\n\t\t}\r\n\t\telse {\r\n          this.alertSrv.set('Multistat Data Error', 'Query type \"' + dataList[0].Type + '\", not supported', 'error', 5000);\r\n\t\t}\r\n    }\r\n\r\n\tparseCols(cols){\r\n\t\tfor(var i=0; i<cols.length; i++){\r\n\t\t\tswitch(cols[i].text){\r\n\t\t\t\tcase 'time_sec': {\r\n\t\t\t\t\tthis.time_col = i; \r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcase 'metric': this.metric_col = i; break;\r\n\t\t\t\tcase 'value': this.value_col = i; break;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n//    seriesHandler(seriesData) {\r\n//        var series = new TimeSeries({\r\n//            datapoints: seriesData.datapoints,\r\n//            alias: seriesData.target,\r\n//        });\r\n//\r\n//        series.flotpairs = series.getFlotPairs(this.panel.nullPointMode);\r\n//        return series;\r\n//    }\r\n//\r\n//    getDecimalsForValue(value, decimals) {\r\n//        if (_.isNumber(decimals)) {\r\n//            return {\r\n//                decimals: decimals,\r\n//                scaledDecimals: null\r\n//            };\r\n//        }\r\n//\r\n//        var delta = value / 2;\r\n//        var dec = -Math.floor(Math.log(delta) / Math.LN10);\r\n//\r\n//        var magn = Math.pow(10, -dec),\r\n//            norm = delta / magn, // norm is between 1.0 and 10.0\r\n//            size;\r\n//\r\n//        if (norm < 1.5) {\r\n//            size = 1;\r\n//        } else if (norm < 3) {\r\n//            size = 2;\r\n//            // special case for 2.5, requires an extra decimal\r\n//            if (norm > 2.25) {\r\n//                size = 2.5;\r\n//                ++dec;\r\n//            }\r\n//        } else if (norm < 7.5) {\r\n//            size = 5;\r\n//        } else {\r\n//            size = 10;\r\n//        }\r\n//\r\n//        size *= magn;\r\n//\r\n//        // reduce starting decimals if not needed\r\n//        if (Math.floor(value) === value) {\r\n//            dec = 0;\r\n//        }\r\n//\r\n//        var result = {};\r\n//        result.decimals = Math.max(0, dec);\r\n//        result.scaledDecimals = result.decimals - Math.floor(Math.log(size) / Math.LN10) + 2;\r\n//\r\n//        return result;\r\n//    }\r\n//\r\n//    formatValue(value, decimals) {\r\n//        // crude work-around for kbn formatting function error - preserve decimal places even for whole numbers\r\n//        if (value == 0 && decimals > 0)\r\n//            value += 0.000000000000001;\r\n//        var decimalInfo = this.getDecimalsForValue(value, decimals);\r\n//        var formatFunc = kbn.valueFormats[this.panel.Metric.Format];\r\n//        return formatFunc(value, decimalInfo.decimals, decimalInfo.scaledDecimals);\r\n//    }\r\n//\r\n//    setValues(data) {\r\n//        data.flotpairs = [];\r\n//\r\n//        if (this.series.length > 1) {\r\n//            this.alertSrv.set('Multistat Multiple Series Error',\r\n//                'Metric query returns ' + this.series.length + ' series. Multistat Panel expects a single series.\\n\\nResponse:\\n' + JSON.stringify(this.series), 'error', 10000);\r\n//        }\r\n//\r\n//        if (this.series && this.series.length > 0) {\r\n//            var lastPoint = _.last(this.series[0].datapoints);\r\n//            var lastValue = _.isArray(lastPoint) ? lastPoint[0] : null;\r\n//\r\n//            if (this.panel.Metric.Name === 'name') {\r\n//                data.value = 0;\r\n//                data.valueRounded = 0;\r\n//                data.valueFormatted = this.series[0].alias;\r\n//            } else if (_.isString(lastValue)) {\r\n//                data.value = 0;\r\n//                data.valueFormatted = _.escape(lastValue);\r\n//                data.valueRounded = 0;\r\n//            } else {\r\n//                data.value = this.series[0].stats[this.panel.Metric.Name];\r\n//                data.flotpairs = this.series[0].flotpairs;\r\n//\r\n//                if (data == null || data.value == null) {\r\n//                    data.value = 0.0;\r\n//                }\r\n//\r\n//                var decimalInfo = this.getDecimalsForValue(data.value, this.panel.Metric.Decimals);\r\n//                var formatFunc = kbn.valueFormats[this.panel.Metric.Format];\r\n//                data.valueFormatted = formatFunc(data.value, decimalInfo.decimals, decimalInfo.scaledDecimals);\r\n//                data.valueRounded = kbn.roundValue(data.value, decimalInfo.decimals);\r\n//            }\r\n//\r\n//            if (data == null || data.value == null) {\r\n//                data.value = 0.0;\r\n//            }\r\n//\r\n//            // Add $__name variable for using in prefix or postfix\r\n//            data.scopedVars = _.extend({}, this.panel.scopedVars);\r\n//            data.scopedVars[\"__name\"] = {\r\n//                value: this.series[0].label\r\n//            };\r\n//        }\r\n//    }\r\n\r\n    onConfigChanged() {\r\n        this.refresh();\r\n    }\r\n\r\n    link(scope, elem, attrs, ctrl) {\r\n        this.ctrl = ctrl;\r\n        this.elem = elem.find('.panel-content');\r\n    }\r\n}\r\n\r\nMultistatPanelCtrl.templateUrl = 'module.html';\r\n\r\nexport {\r\n    MultistatPanelCtrl as PanelCtrl\r\n};\r\n"]}